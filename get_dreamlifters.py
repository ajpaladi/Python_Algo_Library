import pandas as pd
import numpy as np
import os
import os
import ipywidgets as widgets
import plotly.express as px
import plotly.graph_objs as go
from tqdm import tqdm_notebook as tqdm
from geolocation_client import ExactEarthClient, XModeClient, WejoClient, ADSBExchangeClient
import geopandas as gpd
from matplotlib import pyplot as plt
from shapely.geometry import Point, Polygon
import pandas as pd
import shapely.wkt
from tqdm import tqdm_notebook as tqdm
import numpy as np
import h3
import folium

#define wkt geometries
mcl = shapely.wkt.loads('MultiPolygon (((-97.29005699007601038 37.6348808909454533, -97.28276235125701987 37.64308899046844203, -97.24385474519253592 37.64308899046844203, -97.24404928322287844 37.62598845417920757, -97.25795875239103339 37.62244460762838116, -97.24949634807178711 37.61597279973072716, -97.2531925706482383 37.6130448920447833, -97.2583478284516616 37.61604984837583743, -97.26048774678517361 37.61312194372369788, -97.26350308625509911 37.61258258029285173, -97.26749085580443932 37.60194861677601352, -97.27867679254813993 37.6045687199408718, -97.27867679254813993 37.60079265957219263, -97.28694465883667419 37.60086972394485372, -97.28713919686697409 37.60803636164438046, -97.29258626171589697 37.60973159430830037, -97.29287806876139655 37.6172826158399829, -97.29530979414036551 37.6240624715726284, -97.29132176451882685 37.62999433813362771, -97.29005699007601038 37.6348808909454533)))')
pae = shapely.wkt.loads('MultiPolygon (((-122.29532365429761853 47.89688461094704053, -122.29535664131179828 47.89805674951713144, -122.29544974028277693 47.90136401296213364, -122.29546167492289044 47.90178984622826164, -122.2954677945983093 47.9020087491424249, -122.29546950174743358 47.90207853307583719, -122.29547140174743447 47.90216913307583724, -122.2954743689037258 47.90231296009468309, -122.29552606318699759 47.9048137835353387, -122.2955328616028936 47.90514250693967568, -122.29555686111511648 47.90630268335901576, -122.29556757218482232 47.90682181918187865, -122.29558646886782469 47.90773825827696442, -122.29560636289582476 47.90870036946009236, -122.29562756426898318 47.90972603587893275, -122.29564156146639675 47.91040330027033178, -122.29565595791707722 47.91109872881810361, -122.29567527773113511 47.91203678814699174, -122.29569797133353859 47.91313757782098293, -122.29574836565390683 47.915577102877279, -122.29585176425288751 47.920579235099801, -122.29585237346526583 47.92061117631985212, -122.29586217346525245 47.92117197631985448, -122.2954268059286278 47.92427022612402254, -122.29405533495361169 47.92708230082176613, -122.29188200967486466 47.9293329349487891, -122.28911957031311886 47.93080182075566142, -122.28603842368013943 47.93134517346526735, -122.28294017387597137 47.93090980592862849, -122.28012809917822779 47.92953833495361948, -122.27787746505120481 47.92736500967487956, -122.27640857924433249 47.92460257031312665, -122.27586522653473367 47.92152142368014722, -122.27585570563026351 47.92097659477846605, -122.27575263574712494 47.91599036490019614, -122.27574000765852702 47.91537905517775187, -122.27491794377168333 47.91581098210568967, -122.27183415177000825 47.91633911431582504, -122.26873808946371014 47.91588845376010397, -122.26593282100286331 47.91450311423365349, -122.26369294560986134 47.91231870242156532, -122.26223771789430828 47.90954904377168333, -122.26170958568417291 47.90646525177000825, -122.26170828568417903 47.90636155177001143, -122.26170014869771308 47.90569666581895802, -122.2616674507062271 47.90301623108287998, -122.26166035750735261 47.90243998360195121, -122.26164874508769742 47.90148877046627973, -122.26163004417529123 47.89995409579573504, -122.26161315215485104 47.89857124903387842, -122.26161005836372908 47.89832005315486896, -122.26206139966605235 47.89522409001396852, -122.26344735597719193 47.89241912622729558, -122.26563226023688458 47.89017973119360505, -122.26840223879308667 47.88872511250158226, -122.27148614684513461 47.88819765836373676, -122.27458210998602794 47.88864899966606004, -122.27738707377270089 47.89003495597719962, -122.27771748559337084 47.89035732794980049, -122.27921205984574726 47.88877646492391449, -122.28195880889624902 47.88727844409809364, -122.28503403637245128 47.88670253376604791, -122.28813671758261705 47.88710510804366294, -122.29096314047225746 47.88844676015575175, -122.29323663507608444 47.89059615984574947, -122.29473465590190528 47.89334290889624413, -122.29531056623395102 47.89641813637244638, -122.29532365429761853 47.89688461094704053)))')


def get_dreamlifters(start_date, end_date, airport_geom, airport_names):
    dtype = 'adsb'
    provider = ADSBExchangeClient()
    cols = ['flight','r', 't', 'nic', 'rc', 'gs', 'nic_baro', 'nac_p', 'nac_v', 'sil',
            'sil_type','gva', 'sda', 'alt_geom', 'alt_baro', 'emergency', 'alert', 'squawk', 'spi']
    start, end = pd.to_datetime(start_date), pd.to_datetime(end_date) #inputs
    start_unix, end_unix = int((start - pd.Timestamp('1970-01-01')) / pd.Timedelta('1s')), int((end - pd.Timestamp('1970-01-01')) / pd.Timedelta('1s'))
    print (start_unix, end_unix)
    airport = airport_geom #input
    airport_name = airport_names #input

    #define an empty dataframe
    dreamlifter_df = pd.DataFrame()
    dreamlifter_dict = {'date':[], 'airport': [], 'flight_count': [], 'flight#(s)': [], 'registration#(s)': []}

    for geom, name in tqdm((zip(airport, airport_name)), total = len(airport)):
    #for item in tqdm((airport), total = len(airport)):
        #for name in airport_name:
        aoi_geom = geom
        aoi_name = name
        pings = provider.get_pings_in_area(aoi_geom.wkt, start_unix, end_unix, columns=cols, gh_filter_precision=5)
        pings['unixtime'] = pd.to_datetime(pings['unixtime'], unit ='s')
        pings['date'] = pings['unixtime'].dt.strftime('%Y-%m-%d')
        pings['date'] = pd.to_datetime(pings['date'])
        pings = pings[(pings.t != '') + (pings.emergency != '')]
        pings['airport'] = aoi_name
        dreamlifters = pings[(pings.t == 'B744')]
        dreamlifter_df = dreamlifter_df.append(dreamlifters)
        for date in tqdm((dreamlifters.date.unique()), total = len(dreamlifters.date.unique())):
            df = dreamlifters[(dreamlifters.date == date)]
            date_unique = df.date.unique()
            dreamlifter_dict['date'].append(date_unique) #append to dict 
            dreamlifter_dict['airport'].append(df['airport'].unique()) #append to dict
            flight_unique = df.flight.unique()
            dreamlifter_dict['flight#(s)'].append(flight_unique) #append to dict
            reg_unique = df.r.unique()
            dreamlifter_dict['registration#(s)'].append(reg_unique) #append to dict
            counts = df.drop_duplicates(subset = 'flight')
            flight_count = len(counts.flight.unique())
            dreamlifter_dict['flight_count'].append(flight_count)

    report = pd.DataFrame(dict([ (k,pd.Series(v)) for k,v in dreamlifter_dict.items() ]))
    report['date'] = report['date'].str[0]
    report['date'] = pd.to_datetime(report['date'], format = '%Y-%m-%d')
    report['airport'] = report['airport'].str[0]
    report.to_csv('dreamlifters' + '_'+ start_date + '_' + end_date + '.csv')
    print(report)
    return get_dreamlifters
    
    ###example 
    
    #get_dreamlifters('2022-09-01', '2023-01-09', [mcl, pae], ['mcl', 'pae'])
