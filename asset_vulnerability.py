import warnings
import pandas as pd
import geopandas as geo
import numpy as np
from tqdm import tqdm
import os
import plotly.express as px
import uuid
import osmnx as ox
from shapely.geometry import Point, Polygon, MultiPolygon, MultiPolygon, MultiPoint
from geopy.geocoders import Nominatim
locator = Nominatim(user_agent="myGeocoder")
import requests

warnings.simplefilter(action='ignore', category=FutureWarning)

#osmnx config timeout
timeout = 1000
ox.config(timeout=timeout)

nws_region = pd.read_csv('data_dir/nws_region_codes.csv')
state_ab = pd.read_csv('data_dir/state_abbv.csv')
counties = geo.read_file('data_dir/c_13se22/c_13se22.shp')

w_d = {'state': [], 'area': [], 'event':[], 'sent':[], 'onset':[], 'ends':[], 'geocode': [], 'severity': [],
       'certainty':[], 'urgency':[], 'headline': [], 'descr': []}

for ab in state_ab.state_abbv:
    url = f'https://api.weather.gov/alerts/active?area={ab}'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
    else:
        print(f'Error: {response.status_code}')
       
    for i in data['features']:
        #print(i['properties'])
        if i['properties']['severity'] == 'Severe':
            state = ab
            w_d['state'].append(state)
            area = i['properties']['areaDesc']
            w_d['area'].append(area)
            event = i['properties']['event']
            w_d['event'].append(event)
            sent = i['properties']['sent']
            w_d['sent'].append(sent)
            onset = i['properties']['onset']
            w_d['onset'].append(onset)
            ends = i['properties']['ends']
            w_d['ends'].append(ends)
            geocode = i['properties']['geocode']['SAME']
            w_d['geocode'].append(geocode)
            severity = i['properties']['severity']
            w_d['severity'].append(severity)
            urgency = i['properties']['urgency']
            w_d['urgency'].append(urgency)
            certainty = i['properties']['certainty']
            w_d['certainty'].append(certainty)
            headline = i['properties']['headline']
            w_d['headline'].append(headline)
            descr = i['properties']['description']
            w_d['descr'].append(descr)
            
report = pd.DataFrame(dict([ (k,pd.Series(v)) for k,v in w_d.items() ]))
report['sent'] = pd.to_datetime(report['sent'], utc = True)
report['onset'] = pd.to_datetime(report['onset'], utc = True)
report['ends'] = pd.to_datetime(report['ends'], utc = True)
report.to_csv('report.csv')

#matchin geocodes in each reports to fips codes in the counties gdf
#selecting on a single column

affected = []

for i in report['geocode'].iloc[0:]:
    no_zeros = [zero.lstrip('0') for zero in i]
    for nzero in no_zeros:
        affected.append(nzero)
        
affected_nd = list(set(affected))
affected_nd.sort(reverse = False)


affected_counties = geo.GeoDataFrame()

try:
    for f in affected_nd:
        counties['FIPS'] = counties['FIPS'].str.lstrip('0')
        county = counties[(counties['FIPS'] == f)]
        affected_counties = affected_counties.append(county)
except FutureWarning:
    pass

### prep for join 

report = report.explode('geocode')
report = report.drop_duplicates(subset = ['geocode', 'event', 'area'])
report['geocode'] = report['geocode'].str.lstrip('0')
merged_affected = pd.merge(report, affected_counties, left_on='geocode', right_on='FIPS', how='left')
geo_merge = geo.GeoDataFrame(merged_affected, geometry='geometry')
geo_merge.to_csv('geo_merge.csv')
geo_merge = geo_merge.to_crs({'init': 'epsg:4326'})

#osm_utility_pull
#tags = {'power': True}

affected_utilities = geo.GeoDataFrame()

for code in geo_merge['geocode'].unique():
    geo_u = geo_merge[(geo_merge.geocode == code)]
    geom = geo_u.geometry.iloc[0]
    tags = {'power': 'plant'}
    osm_pull = ox.geometries.geometries_from_polygon(geom, tags)
    osm_pull.reset_index(inplace = True)
    affected_utilities = pd.concat([affected_utilities, osm_pull])
    affected_utilities.to_csv('affected_utilities.csv')

v_utils = affected_utilities[['geometry', 'osmid', 'element_type','name', 'operator', 'plant:output:electricity', 'power', 'source']]

prod = geo.GeoDataFrame(v_utils, geometry='geometry')
merged = geo.sjoin(prod, geo_merge, how='inner', op='intersects')
final = merged.drop_duplicates(subset = 'osmid')
final['centroid'] = final['geometry'].centroid
final['descr'] = final['descr'].str.wrap(500)

final.to_csv('final.csv')

'''
px.set_mapbox_access_token(open("mapbox_token.txt").read())

fig = px.scatter_mapbox(final, lat=final['centroid'].y, lon=final['centroid'].x, hover_name = 'name', 
                        color_continuous_scale=px.colors.sequential.Turbo, mapbox_style="dark",
                        color = 'event', size_max=80, zoom=3)
fig.update_layout(
    width=1000, # Set the width of the plot to 800 pixels
    height=600 # Set the height of the plot to 600 pixels
)
fig.show()
'''
